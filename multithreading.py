import threading
import queue
import requests
import time

# ----------- –ù–ê–°–¢–†–û–ô–ö–ò -----------

NUM_WORKERS = 3
urls = ["https://deelay.me/2000/https://example.com"] * 5

# ----------- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –û–ë–™–ï–ö–¢–´ -----------

task_queue = queue.Queue()
print_lock = threading.Lock()
done_event = threading.Event()
thread_data = threading.local()

# ----------- –û–¢–õ–û–ñ–ï–ù–ù–ê–Ø –ó–ê–î–ê–ß–ê (Timer) -----------

def delayed_task():
    with print_lock:
        print("üïí [Timer] –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")

timer = threading.Timer(1.0, delayed_task)
timer.start()

# ----------- –†–ê–ë–û–ß–ò–ô –ü–û–¢–û–ö -----------

def worker():
    thread_data.start_time = time.time()

    while True:
        url = task_queue.get()
        if url is None:
            break  # —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è

        with print_lock:
            print(f"[{threading.current_thread().name}] üîÑ –ù–∞—á–∞–ª –∑–∞–≥—Ä—É–∑–∫—É: {url} "
                  f"(–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è –≤ {round(thread_data.start_time, 2)})")

        try:
            response = requests.get(url)
            status = response.status_code
        except Exception as e:
            status = f"–û—à–∏–±–∫–∞: {e}"

        with print_lock:
            print(f"[{threading.current_thread().name}] ‚úÖ –ó–∞–≤–µ—Ä—à–∏–ª: {url} [{status}]")

        task_queue.task_done()

# ----------- –£–í–ï–î–û–ú–ò–¢–ï–õ–¨ –û –ó–ê–í–ï–†–®–ï–ù–ò–ò -----------

def notify_when_done():
    task_queue.join()
    done_event.set()

# ----------- –ó–ê–ü–£–°–ö -----------

def main():
    start = time.time()

    # –°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã
    threads = []
    for i in range(NUM_WORKERS):
        t = threading.Thread(target=worker, name=f"Worker-{i+1}")
        t.start()
        threads.append(t)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ–±—â–∏—Ç, –∫–æ–≥–¥–∞ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ
    notifier = threading.Thread(target=notify_when_done)
    notifier.start()

    # –ö–ª–∞–¥—ë–º –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å
    for url in urls:
        task_queue.put(url)

    # –ñ–¥—ë–º —Å–∏–≥–Ω–∞–ª –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–¥–∞—á
    done_event.wait()
    with print_lock:
        print("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –ø–æ—Ç–æ–∫–∞–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
    for _ in threads:
        task_queue.put(None)

    # –î–æ–∂–∏–¥–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
    for t in threads:
        t.join()

    notifier.join()
    timer.join()

    print(f"‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è: {round(time.time() - start, 2)} —Å–µ–∫.")

# ----------- –°–¢–ê–†–¢ –ü–†–û–ì–†–ê–ú–ú–´ -----------

if __name__ == "__main__":
    main()
